name: Deploy to GitHub Pages

on:
  # 在推送到 main 分支时触发部署
  push:
    branches: [main]
  # 允许手动触发部署
  workflow_dispatch:

# 设置 GITHUB_TOKEN 的权限，以允许部署到 GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write
  deployments: write
  statuses: write
  actions: write
  packages: read

# 只允许一个并发部署，跳过正在运行和最新队列之间的运行队列
# 但是，不要取消正在进行的运行，因为我们希望允许这些生产部署完成
concurrency:
  group: 'pages'
  cancel-in-progress: false

jobs:
  # 构建 Next.js 应用
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10.5.2
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') || '' }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: |
          echo "Running pnpm install with --no-frozen-lockfile"
          pnpm install --no-frozen-lockfile

      - name: Setup Pages
        uses: actions/configure-pages@v4
        with:
          # 配置静态输出目录为 Next.js 的输出目录
          static_site_generator: next
          enablement: true
          token: ${{ secrets.PAGES_PAT }}

      - name: Build with Next.js
        run: |
          echo "Starting Next.js build process..."
          NODE_OPTIONS="--max_old_space_size=4096" pnpm build
          echo "Build process completed with exit code: $?"

          echo "Checking if build generated expected directories..."
          if [ -d "out" ]; then 
            echo "out directory created successfully!"
            ls -la out
          else
            echo "ERROR: out directory was not generated by the build process"
          fi
        env:
          # 添加 Next.js 的输出配置，确保生成静态文件
          NEXT_PUBLIC_BASE_PATH: /${{ github.event.repository.name }}

      - name: Debug - Project Structure and Configuration
        run: |
          echo "============= Project Structure ============="
          echo "Current working directory: $(pwd)"
          echo "Directory structure:"
          tree -L 2 || (echo "Installing tree..." && apt-get update && apt-get install -y tree && tree -L 2)

          echo "\n============= Package Information ============="
          echo "Node version: $(node -v)"
          echo "PNPM version: $(pnpm -v)"
          echo "Next.js version from package.json:"
          grep -A 1 "\"next\":" package.json || echo "Next.js version not found"

          echo "\n============= Build Configuration ============="
          echo "Next.js configuration:"
          if [ -f "next.config.js" ]; then
            echo "Content of next.config.js:"
            cat next.config.js
          elif [ -f "next.config.ts" ]; then
            echo "Content of next.config.ts:"
            cat next.config.ts
          else
            echo "Next.js config file not found"
          fi

          echo "\n============= Build Output ============="
          echo "Checking out directory:"
          if [ -d "out" ]; then
            echo "out directory exists with the following contents:"
            ls -la out
            echo "\nDetailed out structure:"
            tree out || ls -R out
          else
            echo "out directory does not exist"
          fi

          echo "\n============= Build Scripts ============="
          echo "Build scripts from package.json:"
          grep -A 5 "\"build\"" package.json || echo "Build script not found"

      - name: Verify Build Output
        run: |
          echo "Verifying build output..."
          if [ -d "out" ]; then
            echo "✅ out directory exists"
            echo "Directory structure:"
            tree out || ls -R out
            echo "\nTotal files in out: $(find out -type f | wc -l)"
            echo "Total size of out: $(du -sh out | cut -f1)"
          else
            echo "❌ ERROR: out directory not found"
            echo "Current directory contents:"
            ls -la
            exit 1
          fi

      - name: Try manual export
        run: |
          echo "Attempting manual export..."
          # 如果out目录已存在，则跳过导出
          if [ -d "out" ]; then
            echo "out directory already exists, skipping export"
            ls -la out
            exit 0
          fi

          # 检查是否生成了out目录
          if [ -d "out" ]; then 
            echo "out directory created successfully!"
            ls -la out
          else 
            echo "ERROR: Manual export failed to generate out directory"
          fi

      - name: Upload artifact
        run: |
          if [ -d "out" ]; then
            echo "Found out directory, proceeding with upload"
          else
            echo "ERROR: out directory not found!"
            echo "Build process failed to generate the required output directory."
            exit 1  # 抛出错误，终止工作流
          fi

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

  # 部署到 GitHub Pages
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          token: ${{ secrets.PAGES_PAT }}
