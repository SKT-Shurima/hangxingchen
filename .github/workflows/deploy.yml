name: Deploy to GitHub Pages

on:
  # 在推送到 main 分支时触发部署
  push:
    branches: [main]
  # 允许手动触发部署
  workflow_dispatch:

# 设置 GITHUB_TOKEN 的权限，以允许部署到 GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write
  actions: write
  deployments: write

# 只允许一个并发部署，跳过正在运行和最新队列之间的运行队列
# 但是，不要取消正在进行的运行，因为我们希望允许这些生产部署完成
concurrency:
  group: 'pages'
  cancel-in-progress: false

jobs:
  # 构建 Next.js 应用
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10.5.2
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') || '' }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: |
          echo "Running pnpm install with --no-frozen-lockfile"
          pnpm install --no-frozen-lockfile

      - name: Setup Pages
        uses: actions/configure-pages@v4
        with:
          # 配置静态输出目录为 Next.js 的输出目录
          static_site_generator: next
          enablement: true
          token: ${{ secrets.PAGES_PAT }}

      - name: Build with Next.js
        run: |
          echo "Starting Next.js build process..."
          pnpm build | tee build.log
          BUILD_EXIT_CODE=${PIPESTATUS[0]}
          echo "Build process completed with exit code: $BUILD_EXIT_CODE"
          if [ $BUILD_EXIT_CODE -ne 0 ]; then
            echo "Build failed! Checking build log for errors:"
            grep -i "error" build.log || echo "No specific error found in logs"
          fi
          echo "Checking if build generated expected directories..."
        env:
          # 添加 Next.js 的输出配置，确保生成静态文件
          NEXT_PUBLIC_BASE_PATH: /${{ github.event.repository.name }}

      - name: Debug - List directories and files
        run: |
          echo "Current directory: $(pwd)"
          echo "Checking Next.js version:"
          grep -A 1 "\"next\":" package.json || echo "Next.js version not found in package.json"
          echo "Listing root directory contents:"
          ls -la
          echo "Checking Next.js configuration:"
          if [ -f "next.config.js" ]; then cat next.config.js; elif [ -f "next.config.ts" ]; then cat next.config.ts; else echo "Next.js config file not found"; fi
          echo "Listing .next directory contents (if exists):"
          if [ -d ".next" ]; then ls -la .next; else echo ".next directory does not exist"; fi
          echo "Checking export-marker.json (if exists):"
          if [ -f ".next/export-marker.json" ]; then cat .next/export-marker.json; else echo "export-marker.json does not exist"; fi
          echo "Listing out directory contents (if exists):"
          if [ -d "out" ]; then ls -la out; else echo "out directory does not exist"; fi
          echo "Searching for any potential output directories:"
          find . -type d -maxdepth 2 | sort
          echo "Checking for any dist directory:"
          if [ -d "dist" ]; then ls -la dist; else echo "dist directory does not exist"; fi
          echo "Checking package.json build script:"
          grep -A 5 "\"build\"" package.json || echo "Build script not found in package.json"

      - name: Try manual export
        run: |
          echo "Attempting manual export..."
          # 检查 package.json 中是否有 export 脚本
          if grep -q "\"export\"" package.json; then
            echo "Running pnpm export..."
            pnpm export
          else
            echo "No export script found in package.json, trying next export..."
            npx next export
          fi
          echo "Checking if out directory exists after manual export:"
          if [ -d "out" ]; then 
            echo "out directory created successfully!"
            ls -la out
          else 
            echo "out directory still does not exist after manual export"
          fi

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out
        continue-on-error: false # 如果 out 目录不存在，这里会失败，这是正确的行为

  # 部署到 GitHub Pages
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          token: ${{ secrets.PAGES_PAT }}
